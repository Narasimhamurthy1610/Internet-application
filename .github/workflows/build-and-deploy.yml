name: CI/CD Pipeline for EC2

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

env:
  IMAGE_NAME: 8310222505/internet-application
  CONTAINER_PORT: 5000
  HOST_PORT: 5000

jobs:
  test:
    runs-on: ubuntu-22.04
    name: Run Unit and Integration Tests

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Remove old python-version if any
        run: rm -rf ~/.pyenv ~/.cache/pip

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.10.13

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Unit Tests
        run: |
          pytest tests/unit

      - name: Run Integration Tests
        run: |
          pytest tests/integration

  build-and-push:
    runs-on: ubuntu-22.04
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE_NAME }}:latest

      - name: Security Scan with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}:latest
          format: 'table'
          severity: 'CRITICAL,HIGH'

  deploy-to-staging:
    needs: build-and-push
    runs-on: ubuntu-22.04
    environment: staging

    steps:
      - name: Decode SSH Key
        run: |
          echo "${{ secrets.EC2_KEY }}" | base64 -d > key.pem
          chmod 600 key.pem

      - name: SSH and Deploy to Staging
        run: |
          ssh -o StrictHostKeyChecking=no \
          -o ServerAliveInterval=60 \
          -i key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            docker stop myapp || true
            docker rm myapp || true
            docker pull ${{ env.IMAGE_NAME }}:latest
            docker run -d -p 5000:5000 --name myapp ${{ env.IMAGE_NAME }}:latest
          EOF

  deploy-to-prod:
    needs: deploy-to-staging
    runs-on: ubuntu-22.04
    environment:
      name: production
        #      url: https://your-production-url.com
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Wait for Manual Approval
        uses: hmarr/auto-approve-action@v3
        if: github.event_name == 'workflow_dispatch'

      - name: Decode SSH Key
        run: |
          echo "${{ secrets.EC2_KEY }}" | base64 -d > key.pem
          chmod 600 key.pem

      - name: SSH and Deploy to Production
        run: |
          ssh -o StrictHostKeyChecking=no \
          -o ServerAliveInterval=60 \
          -i key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            docker stop myapp || true
            docker rm myapp || true
            docker pull ${{ env.IMAGE_NAME }}:latest
            docker run -d -p 5000:5000 --name myapp ${{ env.IMAGE_NAME }}:latest
          EOF

  notify-on-failure:
    needs: [test, build-and-push, deploy-to-staging, deploy-to-prod]
    if: failure()
    runs-on: ubuntu-latest

    steps:
      - name: Send Failure Email
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.EMAIL_FROM }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "ðŸš¨ CI/CD Pipeline Failed: ${{ github.workflow }}"
          to: ${{ secrets.EMAIL_TO }}
          from: ${{ secrets.EMAIL_FROM }}
          content_type: text/html
          body: |
            <p><b>GitHub Workflow Failed:</b> ${{ github.workflow }}</p>
            <p><b>Repo:</b> ${{ github.repository }}</p>
            <p><b>Branch:</b> ${{ github.ref }}</p>
            <p><b>Run URL:</b> <a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}">Click here</a></p>

